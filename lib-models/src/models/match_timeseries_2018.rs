/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 *
 * Generated by: https://openapi-generator.tech
 */
use serde::{Deserialize, Serialize};

/// MatchTimeseries2018 : Timeseries data for the 2018 game *FIRST* POWER UP. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This model is currently under active development and may change at any time, including in breaking ways.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchTimeseries2018 {
    /// TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
    #[serde(rename = "event_key", skip_serializing_if = "Option::is_none")]
    pub event_key: Option<String>,
    /// Match ID consisting of the level, match number, and set number, eg `qm45` or `f1m1`.
    #[serde(rename = "match_id", skip_serializing_if = "Option::is_none")]
    pub match_id: Option<String>,
    /// Current mode of play, can be `pre_match`, `auto`, `telop`, or `post_match`.
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(rename = "play", skip_serializing_if = "Option::is_none")]
    pub play: Option<i32>,
    /// Amount of time remaining in the match, only valid during `auto` and `teleop` modes.
    #[serde(rename = "time_remaining", skip_serializing_if = "Option::is_none")]
    pub time_remaining: Option<i32>,
    /// 1 if the blue alliance is credited with the AUTO QUEST, 0 if not.
    #[serde(rename = "blue_auto_quest", skip_serializing_if = "Option::is_none")]
    pub blue_auto_quest: Option<i32>,
    /// Number of POWER CUBES in the BOOST section of the blue alliance VAULT.
    #[serde(rename = "blue_boost_count", skip_serializing_if = "Option::is_none")]
    pub blue_boost_count: Option<i32>,
    /// Returns 1 if the blue alliance BOOST was played, or 0 if not played.
    #[serde(rename = "blue_boost_played", skip_serializing_if = "Option::is_none")]
    pub blue_boost_played: Option<i32>,
    /// Name of the current blue alliance POWER UP being played, or `null`.
    #[serde(
        rename = "blue_current_powerup",
        skip_serializing_if = "Option::is_none"
    )]
    pub blue_current_powerup: Option<String>,
    /// 1 if the blue alliance is credited with FACING THE BOSS, 0 if not.
    #[serde(rename = "blue_face_the_boss", skip_serializing_if = "Option::is_none")]
    pub blue_face_the_boss: Option<i32>,
    /// Number of POWER CUBES in the FORCE section of the blue alliance VAULT.
    #[serde(rename = "blue_force_count", skip_serializing_if = "Option::is_none")]
    pub blue_force_count: Option<i32>,
    /// Returns 1 if the blue alliance FORCE was played, or 0 if not played.
    #[serde(rename = "blue_force_played", skip_serializing_if = "Option::is_none")]
    pub blue_force_played: Option<i32>,
    /// Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT.
    #[serde(
        rename = "blue_levitate_count",
        skip_serializing_if = "Option::is_none"
    )]
    pub blue_levitate_count: Option<i32>,
    /// Returns 1 if the blue alliance LEVITATE was played, or 0 if not played.
    #[serde(
        rename = "blue_levitate_played",
        skip_serializing_if = "Option::is_none"
    )]
    pub blue_levitate_played: Option<i32>,
    /// Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active.
    #[serde(
        rename = "blue_powerup_time_remaining",
        skip_serializing_if = "Option::is_none"
    )]
    pub blue_powerup_time_remaining: Option<String>,
    /// 1 if the blue alliance owns the SCALE, 0 if not.
    #[serde(rename = "blue_scale_owned", skip_serializing_if = "Option::is_none")]
    pub blue_scale_owned: Option<i32>,
    /// Current score for the blue alliance.
    #[serde(rename = "blue_score", skip_serializing_if = "Option::is_none")]
    pub blue_score: Option<i32>,
    /// 1 if the blue alliance owns their SWITCH, 0 if not.
    #[serde(rename = "blue_switch_owned", skip_serializing_if = "Option::is_none")]
    pub blue_switch_owned: Option<i32>,
    /// 1 if the red alliance is credited with the AUTO QUEST, 0 if not.
    #[serde(rename = "red_auto_quest", skip_serializing_if = "Option::is_none")]
    pub red_auto_quest: Option<i32>,
    /// Number of POWER CUBES in the BOOST section of the red alliance VAULT.
    #[serde(rename = "red_boost_count", skip_serializing_if = "Option::is_none")]
    pub red_boost_count: Option<i32>,
    /// Returns 1 if the red alliance BOOST was played, or 0 if not played.
    #[serde(rename = "red_boost_played", skip_serializing_if = "Option::is_none")]
    pub red_boost_played: Option<i32>,
    /// Name of the current red alliance POWER UP being played, or `null`.
    #[serde(
        rename = "red_current_powerup",
        skip_serializing_if = "Option::is_none"
    )]
    pub red_current_powerup: Option<String>,
    /// 1 if the red alliance is credited with FACING THE BOSS, 0 if not.
    #[serde(rename = "red_face_the_boss", skip_serializing_if = "Option::is_none")]
    pub red_face_the_boss: Option<i32>,
    /// Number of POWER CUBES in the FORCE section of the red alliance VAULT.
    #[serde(rename = "red_force_count", skip_serializing_if = "Option::is_none")]
    pub red_force_count: Option<i32>,
    /// Returns 1 if the red alliance FORCE was played, or 0 if not played.
    #[serde(rename = "red_force_played", skip_serializing_if = "Option::is_none")]
    pub red_force_played: Option<i32>,
    /// Number of POWER CUBES in the LEVITATE section of the red alliance VAULT.
    #[serde(rename = "red_levitate_count", skip_serializing_if = "Option::is_none")]
    pub red_levitate_count: Option<i32>,
    /// Returns 1 if the red alliance LEVITATE was played, or 0 if not played.
    #[serde(
        rename = "red_levitate_played",
        skip_serializing_if = "Option::is_none"
    )]
    pub red_levitate_played: Option<i32>,
    /// Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active.
    #[serde(
        rename = "red_powerup_time_remaining",
        skip_serializing_if = "Option::is_none"
    )]
    pub red_powerup_time_remaining: Option<String>,
    /// 1 if the red alliance owns the SCALE, 0 if not.
    #[serde(rename = "red_scale_owned", skip_serializing_if = "Option::is_none")]
    pub red_scale_owned: Option<i32>,
    /// Current score for the red alliance.
    #[serde(rename = "red_score", skip_serializing_if = "Option::is_none")]
    pub red_score: Option<i32>,
    /// 1 if the red alliance owns their SWITCH, 0 if not.
    #[serde(rename = "red_switch_owned", skip_serializing_if = "Option::is_none")]
    pub red_switch_owned: Option<i32>,
}

impl MatchTimeseries2018 {
    /// Timeseries data for the 2018 game *FIRST* POWER UP. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This model is currently under active development and may change at any time, including in breaking ways.
    pub fn new() -> MatchTimeseries2018 {
        MatchTimeseries2018 {
            event_key: None,
            match_id: None,
            mode: None,
            play: None,
            time_remaining: None,
            blue_auto_quest: None,
            blue_boost_count: None,
            blue_boost_played: None,
            blue_current_powerup: None,
            blue_face_the_boss: None,
            blue_force_count: None,
            blue_force_played: None,
            blue_levitate_count: None,
            blue_levitate_played: None,
            blue_powerup_time_remaining: None,
            blue_scale_owned: None,
            blue_score: None,
            blue_switch_owned: None,
            red_auto_quest: None,
            red_boost_count: None,
            red_boost_played: None,
            red_current_powerup: None,
            red_face_the_boss: None,
            red_force_count: None,
            red_force_played: None,
            red_levitate_count: None,
            red_levitate_played: None,
            red_powerup_time_remaining: None,
            red_scale_owned: None,
            red_score: None,
            red_switch_owned: None,
        }
    }
}
